# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# Declaring parameter variables.
parameters:
- name: sourcesitename
  displayName: Please enter the sourcesite name with site identifier "https://<App_Base URL>/bi/site/<site identifier>"
  type: string
- name: sourcesiteusername
  displayName: Please enter the Admin User name of the source site.
  type: string
- name: sourcesitepassword
  displayName: Please enter the Admin User password of the source site.
  type: string
- name: targetsitename
  displayName: Please enter the targetsite name with site identifier "https://<App_Base URL>/bi/site/<site identifier>"
  type: string
- name: targetsiteusername
  displayName: Please enter the Admin User name of the target site.
  type: string
- name: targetsitepassword
  displayName: Please enter the Admin User password of the target site.
  type: string
- name: DashboardIDs
  displayName: Please enter the dashboard IDs (comma-separated). Enter "All" for all dashboards.
  type: string
  default: All
- name: categodyID
  displayName: Please enter the catogory ID of target machine.
  type: string

pool:
  vmImage: Windows-latest

jobs:

- job: GetBearerToken
  steps:
  - powershell: | 
      # Getting Bearer token for source machine.
      $apiUrl = "${{ parameters.sourcesitename }}/token"
      $credentials = @{
          grant_type = "password"
          username = "${{ parameters.sourcesiteusername }}"
          password = "${{ parameters.sourcesitepassword }}"
      }
      
      $tokenResponse = Invoke-RestMethod -Uri $apiUrl -Method Post -Body $credentials

      # Debugging line to inspect the authentication response
      Write-Host "Authentication Response: $($tokenResponse | ConvertTo-Json -Depth 10)"
      $bearerToken = $tokenResponse.access_token

      # Store the access token in a new variable
      $storedAccessToken = $bearerToken

      echo "$storedAccessToken"
      echo "##vso[task.setvariable variable=Bearertoken]$storedAccessToken"
    displayName: 'Get Bearer Token and Send POST Request for source machine'
     
  - powershell: |
      $apiEndpoint = "${{ parameters.sourcesitename }}/v4.0/dashboards"  
      $bearerToken = "$(Bearertoken)"  # Access the pipeline variable
      echo "$(Bearertoken)"
      $headers = @{
          "Authorization" = "Bearer $bearerToken"
      }

      try {
          # Send the GET request using the bearer token for getting Dashboard ID's
          $response = Invoke-RestMethod -Uri $apiEndpoint -Method Get -Headers $headers
          Write-Host "API Response: $($response | ConvertTo-Json -Depth 10)"
      } catch {
          Write-Host "Error: $($_.Exception.Message)"
      }
      # Extract the Dashboard "Id" values from the response
      $idsArray = @()
      foreach ($item in $response.Data) {
          $idsArray += $item.Id
      }

      # Display the extracted IDs in array format
      Write-Host "Extracted IDs: $($idsArray -join ',')"
      $Idarray = $($idsArray -join ',')
      echo $Idarray
      echo "##vso[task.setvariable variable=Idarray1]$Idarray"
      # Assinging the dashboard download job API.
      $apiUrl1 = "${{ parameters.sourcesitename }}/v4.0/dashboards/download/job"  
      $bearerToken = "$(Bearertoken)"  # Access the brear token

      $headers = @{
          "Authorization" = "Bearer $bearerToken"
          "Content-Type" = "application/json"
      }
      # declared an array for storing dashboards.
      $dashboardIdsArray = @()
      # Checking if ${{ parameters.DashboardIDs }} contains "All" or "Dashboard ID's"
      if (${{ parameters.DashboardIDs }} -eq "All") {
          $dashboardIdsArray = $Idarray -split ','
          $dashboardIdsArray = $dashboardIdsArray -replace '^"|"$', '"$0"'
      } else {
          $dashboardIdsArray = ${{ parameters.DashboardIDs }} -split ','
          $dashboardIdsArray = $dashboardIdsArray -replace '^"|"$', '"$0"'
      }
      echo $dashboardIdsArray

      # Construct the request body with the Dashboard IDs
      $requestBody = @{
          "DashboardId" = $dashboardIdsArray
          "CanIncludeSensitiveInformation" = $true
      }

      # Convert the request body to JSON format
      $requestBodyJson = $requestBody | ConvertTo-Json -Depth 10

      # Send the POST request using the bearer token and request body
      $response = Invoke-RestMethod -Uri $apiUrl1 -Method Post -Headers $headers -Body $requestBodyJson

      # Display the response for download job id creation API.
      Write-Host "API Response: $($response | ConvertTo-Json -Depth 10)"
      # Extract the JobId from the response and store it in another variable
      $jobId = $response.Data.JobId

      Write-Host "Extracted JobId: $jobId"
      Write-Host "##vso[task.setvariable variable=jobid]$jobId"
      $downloadUrl = "${{ parameters.sourcesitename }}/v4.0/dashboards/download/job/$jobId"
      Write-Host "Download URL: $downloadUrl"

    displayName: 'Get the JOB ID for downlaod the dashboard'
  - powershell: |
      $apiUrl0 = "${{ parameters.sourcesitename }}/v4.0/dashboards/download/job/$(jobid)" 
      $bearerToken = "$(Bearertoken)"  

      $headers = @{
          "Authorization" = "Bearer $bearerToken"
          "Content-Type" = "application/json"
      }
      # Wait for a short interval before checking again
      Start-Sleep -Seconds 5

      # Send the GET request using the bearer token
      $response = Invoke-RestMethod -Uri $apiUrl0 -Method Get -Headers $headers
      
      
      # Display the response for the dashboard download API.
      Write-Host "API Response: $($response | ConvertTo-Json -Depth 10)"
      # Stored the $itemContent and $itemExtension for calling next API.
      $itemContent = $response.Data.ItemContent
      $itemExtension = $response.Data.ItemExtension
      # Assing a API for uplaod metadata of the dashboards.
      $apiUrl11 = "${{ parameters.sourcesitename }}/v4.0/dashboards/upload/meta"  
      $bearerToken = "$(Bearertoken)"  # Access the API with bearer token.

      $headers = @{
          "Authorization" = "Bearer $bearerToken"
          "Content-Type" = "application/json"
      }
      # Construct the request body for API.
      $requestBody = @{
          "FileContent" = $itemContent
          "FileExtension" = $itemExtension
      }
      # Convert the request body to JSON format
      $requestBodyJson = $requestBody | ConvertTo-Json -Depth 10

      # Send the POST request using the bearer token and request body
      $response = Invoke-RestMethod -Uri $apiUrl11 -Method Post -Headers $headers -Body $requestBodyJson
      # Extract the "Data" values and store them in a new variable
      $dataValues = $response.Data
      # Display the response for the upload meta data API.
      Write-Host "API Response: $($response | ConvertTo-Json -Depth 10)"
      # Getting Bearer token for target machine. 
      $apiUrl1 = "${{ parameters.targetsitename }}/token"  # URL to get bearer token
      $credentials = @{
          grant_type = "password"
          username = "${{ parameters.targetsiteusername }}"
          password = "${{ parameters.targetsitepassword }}"
      }
      
      $tokenResponse = Invoke-RestMethod -Uri $apiUrl1 -Method Post -Body $credentials

      # Debugging line to inspect the authentication response
      Write-Host "Authentication Response: $($tokenResponse | ConvertTo-Json -Depth 10)"
      $bearerToken = $tokenResponse.access_token
      # Store the access token in a new variable
      $storedAccessToken = $bearerToken
      echo "##vso[task.setvariable variable=Bearertokentarget]$storedAccessToken"
      #  Assign an API for get categories in target machine.
      $apiUrl2 = "${{ parameters.targetsitename }}/v4.0/categories"  
      $bearerToken = "$storedAccessToken"  # Access the pipeline variable
      $headers = @{
          "Authorization" = "Bearer $bearerToken"
          "Content-Type" = "application/json"
      }
      # Send the GET request using the bearer token
      $response = Invoke-RestMethod -Uri $apiUrl2 -Method Get -Headers $headers
      # Display the response for get categories API.
      Write-Host "API Response: $($response | ConvertTo-Json -Depth 10)"
      # Assign a API for dashboard download job ID creation.
      $apiUrl3 = "${{ parameters.targetsitename }}/v4.0/dashboards/upload"  
      $bearerToken = "$storedAccessToken"  
      $headers = @{
          "Authorization" = "Bearer $bearerToken"
          "Content-Type" = "application/json"
      }
      # Request Body for this api
      $request = @{
          "ItemContent" = $itemContent
          "ItemExtension" = $itemExtension
          "CategoryId" = ${{ parameters.categodyID }}
          "ItemMetaInfo" = $dataValues
           }
      # Display the constructed request body
      $requestBodyJson = $request | ConvertTo-Json -Depth 10
      echo $requestBodyJson
      # Send the GET request using the bearer token
      $response = Invoke-RestMethod -Uri $apiUrl3 -Method Post -Headers $headers -Body $requestBodyJson

      # Display the response for dashboard upload API.
      Write-Host "API Response: $($response | ConvertTo-Json -Depth 10)"
      # Extract the Job ID 
      $jobId = $response.Data.JobId
      echo  $jobId
      # Run the API for find upload status.
      $apiUrl4 = "${{ parameters.targetsitename }}/v4.0/dashboards/upload/job/$jobId"
      $bearerToken = "$storedAccessToken"  # Access the pipeline variable

      $headers = @{
          "Authorization" = "Bearer $bearerToken"
          "Content-Type" = "application/json"
      }
      # Wait for a short interval before checking again
      Start-Sleep -Seconds 10
      $response = Invoke-RestMethod -Uri $apiUrl4 -Method Get -Headers $headers 
      Write-Host "API Response: $($response | ConvertTo-Json -Depth 10)"
  displayName: 'Upload the dashboard'